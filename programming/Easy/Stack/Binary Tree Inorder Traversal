https://leetcode.com/problems/binary-tree-inorder-traversal/description/?envType=problem-list-v2&envId=stack&difficulty=EASY%2CMEDIUM
=====================================================================================================================================

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
        
        List<Integer> result = new ArrayList<>();
        Stack<TreeNode> stack = new Stack<>();
        TreeNode current = root;

        while (current != null || !stack.isEmpty()) {
            // Reach the left most Node of the current Node
            while (current != null) {
                stack.push(current);
                current = current.left;  // Move to the left node
            }
            // Current must be NULL at this point
            current = stack.pop();
            result.add(current.val);    // Visit the node

            current = current.right;    // Move to the right node
        }

        return result;
    }
}
================================================================================================================================



import java.util.ArrayList;
import java.util.List;
import java.util.Stack;
class TreeNode{
    int val;
    TreeNode left;
    TreeNode right;
    TreeNode(){
        
    }
    TreeNode(int val){
        this.val=val;
    }
    TreeNode(int val, TreeNode left, TreeNode right){
        this.val=val;
        this.left=left;
        this.right=right;
    }
}

//[1,null,2,3]
public class BinaryTreeInorder{
    public static List<Integer> inordertraversal(TreeNode root){
        List<Integer> result= new ArrayList<>();
        Stack<TreeNode> stack= new Stack<>();
        TreeNode current=root;
        
        while(current!=null || !stack.isEmpty()){
            
            while(current!=null){
                stack.push(current);
                current=current.left;
            }
            current=stack.pop();
            result.add(current.val);
            
            current=current.right;
        }
        return result;
        
    }
    
    public static void main(String[] args){
        TreeNode root= new TreeNode(1);
        root.right=new TreeNode(2);
        root.right.left=new TreeNode(3);
        
        List<Integer> result= inordertraversal(root);
        System.out.println(result);
    }
}
