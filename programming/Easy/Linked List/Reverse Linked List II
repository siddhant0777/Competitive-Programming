https://leetcode.com/problems/reverse-linked-list-ii/description/?envType=study-plan-v2&envId=top-interview-150
===================================================================================================================

class Solution {
    public ListNode reverseBetween(ListNode head, int left, int right) {

        if (head == null || left == right) {
            return head;  // No need to reverse if the head is null or left == right
        }

        // Step 1: Initialize pointers
        ListNode dummy = new ListNode(0);  // Dummy node to handle edge cases
        dummy.next = head;
        ListNode prev = dummy;

        // Step 2: Traverse the list until the node before the 'left' position
        for (int i = 1; i < left; i++) {
            prev = prev.next;  // Move prev to the node before 'left'
        }

        // Step 3: Start reversing the sublist
        ListNode current = prev.next;  // Current node is the 'left' node
        ListNode next = current.next;

        for (int i = 0; i < right - left; i++) {
            current.next = next.next;  // Step 3a: Detach the 'next' node
            next.next = prev.next;     // Step 3b: Insert 'next' at the front of the sublist
            prev.next = next;          // Step 3c: Move 'next' to the front
            next = current.next;       // Step 3d: Move to the next node in the sublist
        }

        // Step 4: Return the modified list
        return dummy.next;
        
    }
}
