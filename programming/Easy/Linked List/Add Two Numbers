https://leetcode.com/problems/add-two-numbers/description/?envType=study-plan-v2&envId=top-interview-150
============================================================================================================

class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode dummyHead = new ListNode(0);
        ListNode tail = dummyHead;
        int carry = 0;

        while (l1 != null || l2 != null || carry != 0) {
            int digit1 = (l1 != null) ? l1.val : 0;
            int digit2 = (l2 != null) ? l2.val : 0;

            int sum = digit1 + digit2 + carry;
            int digit = sum % 10;
            carry = sum / 10;

            ListNode newNode = new ListNode(digit);
            tail.next = newNode;
            tail = tail.next;

            l1 = (l1 != null) ? l1.next : null;
            l2 = (l2 != null) ? l2.next : null;
        }

        ListNode result = dummyHead.next;
        dummyHead.next = null;
        return result;
    }
}

Explanation
============
Let's walk through an example using the code snippet you've provided, and explain each step of the linked list addition process.

Example:
We have two linked lists representing the numbers 342 and 465, stored in reverse order:

l1 = [2 -> 4 -> 3] (which represents 342)
l2 = [5 -> 6 -> 4] (which represents 465)
The expected output is a linked list representing their sum:

Sum: 342 + 465 = 807
Result list: 7 -> 0 -> 8
Now, let's break down the execution step by step.

Initial Setup:
dummyHead = ListNode(0) (a placeholder node to simplify result list construction).
tail = dummyHead (this points to the current end of the result list).
carry = 0 (this will store any carry-over during addition).


Iteration 1:
Values to add: l1.val = 2, l2.val = 5, carry = 0
Sum: 2 + 5 + 0 = 7
Digit to store: 7 % 10 = 7
Carry: 7 / 10 = 0
Now, we create a new node with the value 7:


ListNode newNode = new ListNode(7);
tail.next = newNode;
tail = tail.next;  // Now, tail points to the node with value 7
The result linked list so far: dummyHead -> 7.

We then move both l1 and l2 to the next nodes:

l1 = l1.next (now l1 points to the node with value 4)
l2 = l2.next (now l2 points to the node with value 6)


Iteration 2:
Values to add: l1.val = 4, l2.val = 6, carry = 0
Sum: 4 + 6 + 0 = 10
Digit to store: 10 % 10 = 0
Carry: 10 / 10 = 1
We create a new node with the value 0:


ListNode newNode = new ListNode(0);
tail.next = newNode;
tail = tail.next;  // Now, tail points to the node with value 0
The result linked list so far: dummyHead -> 7 -> 0.

We then move l1 and l2 to the next nodes:

l1 = l1.next (now l1 points to the node with value 3)
l2 = l2.next (now l2 points to the node with value 4)

Iteration 3:
Values to add: l1.val = 3, l2.val = 4, carry = 1
Sum: 3 + 4 + 1 = 8
Digit to store: 8 % 10 = 8
Carry: 8 / 10 = 0


We create a new node with the value 8:

java
Copy code
ListNode newNode = new ListNode(8);
tail.next = newNode;
tail = tail.next;  // Now, tail points to the node with value 8
The result linked list so far: dummyHead -> 7 -> 0 -> 8.

Now, we move l1 and l2 to the next nodes:

l1 = l1.next (now l1 is null)
l2 = l2.next (now l2 is null)
End of Loop:
Both l1 and l2 are now null, and carry is 0, so we exit the while loop.

Returning the Result:
The final result list is starting at dummyHead.next, which is the list 7 -> 0 -> 8:


ListNode result = dummyHead.next;  // Result is now [7 -> 0 -> 8]
dummyHead.next = null;  // Clean up the dummyHead
return result;  // Return the result list
Final Output:
The final linked list represents the sum 807, and the output is:


7 -> 0 -> 8
This is the sum of the numbers 342 and 465. Each digit corresponds to a node in the resulting linked list, which is returned by the method.

=========================================================================================================================================



// Online Java Compiler
// Use this editor to write, compile and run your Java code online

class ListNode {
    int val;       // Value of the node
    ListNode next; // Pointer to the next node

    // Constructor for creating a node with a value
    ListNode(int x) {
        this.val = x;
        this.next = null;
    }
}


public class Solution{
    public ListNode addTwonumbers(ListNode list1,ListNode list2){
        ListNode dummyhead =new ListNode(0);
        ListNode tail=dummyhead;
        int carry=0;
        
        while(list1!=null || list2!=null||carry!=0){
            int digit1=(list1!=null)?list1.val:0;
            int digit2=(list2!=null)?list2.val:0;
            
            int sum=digit1+digit2+carry;
            int digit=sum%10;
            carry=sum/10;
            
            ListNode newNode= new ListNode(digit);
            tail.next=newNode;
            tail=tail.next;
            
            
            list1=(list1!=null)?list1.next:null;
            list2=(list2!=null)?list2.next:null;
        }
        return dummyhead.next;
    }
    
    public static void main(String[] args){
        Solution solution= new Solution();
        
        ListNode list1= new ListNode(2);
        list1.next=new ListNode(4);
        list1.next.next= new ListNode(3);
        
        ListNode list2= new ListNode(5);
        list2.next=new ListNode(6);
        list2.next.next= new ListNode(4);
        
        ListNode result=solution.addTwonumbers(list1,list2);
        
        System.out.println("Result : ");
        while(result!=null){
            System.out.print(result.val);
            if(result.next!=null){
                System.out.print("->");
            }
            result=result.next;
        }
        System.out.println();
    }
}




