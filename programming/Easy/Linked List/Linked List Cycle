https://leetcode.com/problems/linked-list-cycle/description/?envType=study-plan-v2&envId=top-interview-150
======================================================================

public class Solution {
    public boolean hasCycle(ListNode head) {
        if(head==null || head.next==null){
            return false;
        }
        
        ListNode fast=head;
        ListNode slow=head;

        while (fast!=null && fast.next!=null){
            slow=slow.next;
            fast=fast.next.next;

            if(slow==fast){
                return true;
            }
        }
        return false;
    }
}

=================================================================

class ListNode {
    int val;       // Value of the node
    ListNode next; // Pointer to the next node

    // Constructor for creating a node with a value
    ListNode(int x) {
        this.val = x;
        this.next = null;
    }
}


public class LinkedListCycle{
    public boolean hasCycle(ListNode head){
        if(head==null || head.next==null){
            return false;
        }
        
        ListNode slow=head;
        ListNode fast=head;
        
        while(fast!=null && fast.next!=null){
            slow=slow.next;
            fast=fast.next.next;
            
            if(slow==fast){
                return true;
            }
        }
        return false;
    }

public static void main(String[] args){
    ListNode head= new ListNode(1);
    head.next= new ListNode(2);
    head.next.next=new ListNode(3);
    head.next.next.next= new ListNode(4);
    head.next.next.next.next= new ListNode(5);
    head.next.next.next.next.next=head.next;
    
    LinkedListCycle solution= new LinkedListCycle();
    boolean result= solution.hasCycle(head);
    
    System.out.println("Cycle detected :-->"+result);
}
}
